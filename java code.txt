# Parent class 1
class TeamMember(object):
   def __init__(self, name, uid):
      self.name = name
      self.uid = uid
# Parent class 2
class Worker(object):
   def __init__(self, pay, jobtitle):
      self.pay = pay
      self.jobtitle = jobtitle
# Deriving a child class from the two parent classes
class TeamLeader(TeamMember, Worker):
   def __init__(self, name, uid, pay, jobtitle, exp):
      self.exp = exp
      TeamMember.__init__(self, name, uid)
      Worker.__init__(self, pay, jobtitle)
      print("Name: {}, Pay: {}, Exp: {}".format(self.name, self.pay, self.exp))
TL = TeamLeader('Jake', 10001, 250000, 'Scrum Master', 5)






###WAP to perform arithematic operations

import java.util.Scanner;

public class ArithmeticOperation {

   public static void main(String[] args) {
        
       
        Scanner in = new Scanner(System.in);

        // Input two numbers from user
        System.out.println("Enter first number :");
        int num1 = in.nextInt();
        System.out.println("Enter second number :");
        int num2 = in.nextInt();
        

        // Perform arithmetic operations.
        int sum 		= num1 + num2;
        int difference 	= num1 - num2;
        int product 	= num1 * num2;
        int quotient	= num1 / num2;
        int modulo	    = num1 % num2;
        

        // Print result to console.
        System.out.println("Sum : "         + sum);
        System.out.println("Difference : "  + difference);
        System.out.println("Product : "     + product);
        System.out.println("Quotient : "    + quotient);
        System.out.println("Modulo : "      + modulo);
    }
}



##palindrome

def isPalindrome(n: int) -> bool:
 
    # Find reverse of n
    rev = 0
    i = n
    while i > 0:
        rev = rev * 10 + i % 10
        i //= 10
 
    # If n and rev are same,
    # then n is palindrome
    return (n == rev)
 
# prints palindrome between min and max
def countPal(minn: int, maxx: int) -> None:
    for i in range(minn, maxx + 1):
        if isPalindrome(i):
            print(i, end = " ")
 
# Driver Code
if __name__ == "__main__":
    countPal(100, 2000)
    
   
###AP

def sumofAP(a, n, d):
    total = (n * (2 * a + (n - 1) * d)) / 2
    return total

a = int(input("Please Enter First Number of an A.P Series: : "))
n = int(input("Please Enter the Total Numbers in this A.P Series: : "))
d = int(input("Please Enter the Common Difference : "))

total = sumofAP(a, n, d)
print("\nThe Sum of Arithmetic Progression Series = " , total)



###Fabinocie

def Fibonacci(n):
   
    # Check if input is less than 0 then it will print incorrect input
    if n < 0:
        print("Incorrect input")
 
    # Check if n is equal to 0 then it will return 0
    elif n == 0:
        return 0
 
    # Check if n is 1,2 it will return 1
    elif n == 1 or n == 2:
        return 1
 
    else:
        return Fibonacci(n-1) + Fibonacci(n-2)
 print(Fibonacci(9))


###list empty or not checking

def Enquiry(lis1):
    if len(lis1) == 0:
        return 0
    else:
        return 1
          

lis1 = []
if Enquiry(lis1):
    print ("The list is not empty")
else:
    print("Empty List"


##array in reverse order


public class ReverseArray {  
    public static void main(String[] args) {      
          
           
        int [] arr = new int [] {1, 2, 3, 4, 5};   
          
        System.out.println("Original array: ");  
        for (int i = 0; i < arr.length; i++) {   
            System.out.print(arr[i] + " ");   
        }    
          
        System.out.println();  
          
        System.out.println("Array in reverse order: ");  
        //Loop through the array in reverse order  
        for (int i = arr.length-1; i >= 0; i--) {   
            System.out.print(arr[i] + " ");   
        }    
    }  
}  



## arithematic operators

class Main {
  public static void main(String[] args) {
    
    // declare variables
    int a = 12, b = 5;

    // addition operator
    System.out.println("a + b = " + (a + b));

    // subtraction operator
    System.out.println("a - b = " + (a - b));

    // multiplication operator
    System.out.println("a * b = " + (a * b));

    // division operator
    System.out.println("a / b = " + (a / b));

    // modulo operator
    System.out.println("a % b = " + (a % b));
  }
}


###Logical operations


class Main {
  public static void main(String[] args) {

    // && operator
    System.out.println((5 > 3) && (8 > 5));  // true
    System.out.println((5 > 3) && (8 < 5));  // false

    // || operator
    System.out.println((5 < 3) || (8 > 5));  // true
    System.out.println((5 > 3) || (8 < 5));  // true
    System.out.println((5 < 3) || (8 < 5));  // false

    // ! operator
    System.out.println(!(5 == 3));  // true
    System.out.println(!(5 > 3));  // false
  }
}

## Assignment operators

class Main {
  public static void main(String[] args) {
    
    // create variables
    int a = 4;
    int var;

    // assign value using =
    var = a;
    System.out.println("var using =: " + var);

    // assign value using =+
    var += a;
    System.out.println("var using +=: " + var);

    // assign value using =*
    var *= a;
    System.out.println("var using *=: " + var);
  }
}


###print all the values of array

public class PrintArray {  
    public static void main(String[] args) {  
        //Initialize array  
        int [] arr = new int [] {1, 2, 3, 4, 5};  
        System.out.println("Elements of given array: ");  
        
        for (int i = 0; i < arr.length; i++) {  
            System.out.print(arr[i] + " ");  
        }  
    }  
}  

output:Elements of given array: 
       1 2 3 4 5 


###elements of array in reverse order

public class ReverseArray {  
    public static void main(String[] args) {  
        //Initialize array  
        int [] arr = new int [] {1, 2, 3, 4, 5};  
        System.out.println("Original array: ");  
        for (int i = 0; i < arr.length; i++) {  
            System.out.print(arr[i] + " ");  
        }  
        System.out.println();  
        System.out.println("Array in reverse order: ");  
        //Loop through the array in reverse order  
        for (int i = arr.length-1; i >= 0; i--) {  
            System.out.print(arr[i] + " ");  
        }  
    }  
}  

output: Original array: 
          1 2 3 4 5 
        Array in reverse order: 
          5 4 3 2 1 

###duplicate values in an array

public class DuplicateElement {  
    public static void main(String[] args) {      
          
        //Initialize array   
        int [] arr = new int [] {1, 2, 3, 4, 2, 7, 8, 8, 3};   
          
        System.out.println("Duplicate elements in given array: ");  
        //Searches for duplicate element  
        for(int i = 0; i < arr.length; i++) {  
            for(int j = i + 1; j < arr.length; j++) {  
                if(arr[i] == arr[j])  
                    System.out.println(arr[j]);  
            }  
        }  
    }  
}

output: Duplicate elements in given array: 
         2
         3
         8


###sorting of array

import java.util.Arrays;   
public class SortArrayExample1  
{   
public static void main(String[] args)   
{   
//defining an array of integer type   
int [] array = new int [] {90, 23, 5, 109, 12, 22, 67, 34};  
//invoking sort() method of the Arrays class  
Arrays.sort(array);   
System.out.println("Elements of array sorted in ascending order: ");  
//prints array using the for loop  
for (int i = 0; i < array.length; i++)   
{       
System.out.println(array[i]);   
}   
}  
}  

output: Elements of array sorted in ascending order: 
         5
         12
         22
         23
         34
         67
         90
         109

###prime number

public class PrimeExample{    
 public static void main(String args[]){    
  int i,m=0,flag=0;      
  int n=3;    
  m=n/2;      
  if(n==0||n==1){  
   System.out.println(n+" is not prime number");      
  }
  else{  
   for(i=2;i<=m;i++){      
    if(n%i==0){      
     System.out.println(n+" is not prime number");      
     flag=1;      
     break;      
    }      
   }      
   if(flag==0) 
   {
   System.out.println(n+" is prime number"); }  
  } 
}    
}   

Output:n=4 is not prime number
       n=3 is prime number

###reverse of 123456

public class ReverseNumberExample1   
{  
public static void main(String[] args)   
{  
int number = 123456, reverse = 0;  
while(number != 0)   
{  
int remainder = number % 10;  
reverse = reverse * 10 + remainder;  
number = number/10;  
}  
System.out.println("The reverse of the given number is: " + reverse);  
}  
}  

output: The reverse of the given number is 654321

###total number of character in a string

public class CountCharacter    
{    
    public static void main(String[] args) {    
        String string = "Hi how are you";    
        int count = 0;       
        for(int i = 0; i < string.length(); i++) {    
            if(string.charAt(i) != ' ')    
                count++;    
        }       
        System.out.println("Total number of characters in a string: " + count);    
    }    
}

output:Total number of characters in a string 11

###Binary sort

public class BinarySearchExample{  
 public static void binarySearch(int arr[], int first, int last, int key){  
   int mid = (first + last)/2;  
   while( first <= last ){  
      if ( arr[mid] < key ){  
        first = mid + 1;     
      }else if ( arr[mid] == key ){  
        System.out.println("Element is found at index: " + mid);  
        break;  
      }else{  
         last = mid - 1;  
      }  
      mid = (first + last)/2;  
   }  
   if ( first > last ){  
      System.out.println("Element is not found!");  
   }  
 }  
 public static void main(String args[]){  
        int arr[] = {10,20,30,40,50};  
        int key = 30;  
        int last=arr.length-1;  
        binarySearch(arr,0,last,key);     
 }  
}  

output:Element is found at index: 2

    
